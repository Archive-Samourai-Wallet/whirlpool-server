package com.samourai.whirlpool.server.services;

import static org.springframework.boot.test.context.SpringBootTest.WebEnvironment.RANDOM_PORT;

import com.samourai.wallet.bip47.rpc.BIP47Account;
import com.samourai.wallet.segwit.SegwitAddress;
import com.samourai.whirlpool.protocol.feeOpReturn.FeeOpReturn;
import com.samourai.whirlpool.protocol.feeOpReturn.FeeOpReturnImpl;
import com.samourai.whirlpool.protocol.feeOpReturn.FeeOpReturnImplV0;
import com.samourai.whirlpool.protocol.feeOpReturn.FeeOpReturnImplV1;
import com.samourai.whirlpool.protocol.feePayload.FeePayloadV1;
import com.samourai.whirlpool.server.integration.AbstractIntegrationTest;
import com.samourai.whirlpool.server.services.fee.WhirlpoolFeeData;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;

import com.samourai.whirlpool.server.services.fee.WhirlpoolFeeOutput;
import org.apache.commons.lang3.StringUtils;
import org.bitcoinj.core.ECKey;
import org.bitcoinj.core.TransactionOutPoint;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest(webEnvironment = RANDOM_PORT)
public class FeePayloadServiceTest extends AbstractIntegrationTest {
  private static final int FEE_PAYLOAD_LENGTH = 46; // V1

  private BIP47Account bip47Account;

  @BeforeEach
  @Override
  public void setUp() throws Exception {
    super.setUp();

    bip47Account = computeBip47Account();
  }

  @Test
  public void computeFeePayload() throws Exception {
    Assertions.assertEquals(
            FEE_PAYLOAD_LENGTH,
        feePayloadService.computeFeePayload(123456, (short) 1234, (short) 0).length);

    // without feePayload
    Assertions.assertEquals(
        "00000000 00000001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000",
        bytesToBinaryString(feePayloadService.computeFeePayload(0, (short) 0, (short) 0)));

    Assertions.assertEquals(
        "00000000 00000001 00000000 00000000 00000000 00000001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000",
        bytesToBinaryString(feePayloadService.computeFeePayload(1, (short) 0, (short) 0)));

    Assertions.assertEquals(
        "00000000 00000001 00000000 00000001 11100010 01000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000",
        bytesToBinaryString(feePayloadService.computeFeePayload(123456, (short) 0, (short) 0)));

    // with feePayload
    Assertions.assertEquals(
        "00000000 00000001 00000000 00000000 00000000 00000000 00000000 00000001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000",
        bytesToBinaryString(feePayloadService.computeFeePayload(0, (short) 1, (short) 0)));

    Assertions.assertEquals(
        "00000000 00000001 00000000 00000000 00000000 00000001 00000000 00000001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000",
        bytesToBinaryString(feePayloadService.computeFeePayload(1, (short) 1, (short) 0)));

    Assertions.assertEquals(
        "00000000 00000001 00000000 00000001 11100010 01000000 00000001 00000001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000",
        bytesToBinaryString(feePayloadService.computeFeePayload(123456, (short) 257, (short) 0)));

    // with feePartner
    Assertions.assertEquals(
        "00000000 00000001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000",
        bytesToBinaryString(feePayloadService.computeFeePayload(0, (short) 0, (short) 1)));

    Assertions.assertEquals(
        "00000000 00000001 00000000 00000000 00000000 00000001 00000000 00000001 00000011 00111010 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000",
        bytesToBinaryString(feePayloadService.computeFeePayload(1, (short) 1, (short) 826)));

    Assertions.assertEquals(
        "00000000 00000001 00000000 00000001 11100010 01000000 00000001 00000001 00110000 00111001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000",
        bytesToBinaryString(
            feePayloadService.computeFeePayload(123456, (short) 257, (short) 12345)));
    }

  @Test
  public void parseFeePayload_64() throws Exception {
    // without feePayload
    doParseFeePayload(
            0,
            (short) 0,
            (short) 0,


    doParseFeePayload(
            1,
            (short) 0,
            (short) 0,


    doParseFeePayload(
            123456,
            (short) 0,
            (short) 0,


    // with feePayload
    doParseFeePayload(
            0,
            (short) 1,
            (short) 0,


    doParseFeePayload(
            1,
            (short) 1,
            (short) 0,


    doParseFeePayload(
            123456,
            (short) 257,
            (short) 0,


    // with feePartner
    doParseFeePayload(
            0,
            (short) 0,
            (short) 1,


    doParseFeePayload(
            1,
            (short) 1,
            (short) 826,


    doParseFeePayload(
            123456,
            (short) 257,
            (short) 12345,

  }

  @Test
  public void parseFeePayload_46() throws Exception {
    // without feePayload
    doParseFeePayload(
            0,
            (short) 0,
            (short) 0,
            "00000000 00000001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000");

    doParseFeePayload(
            1,
            (short) 0,
            (short) 0,
            "00000000 00000001 00000000 00000000 00000000 00000001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000");

    doParseFeePayload(
            123456,
            (short) 0,
            (short) 0,
            "00000000 00000001 00000000 00000001 11100010 01000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000");

    // with feePayload
    doParseFeePayload(
            0,
            (short) 1,
            (short) 0,
            "00000000 00000001 00000000 00000000 00000000 00000000 00000000 00000001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000");

    doParseFeePayload(
            1,
            (short) 1,
            (short) 0,
            "00000000 00000001 00000000 00000000 00000000 00000001 00000000 00000001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000");

    doParseFeePayload(
            123456,
            (short) 257,
            (short) 0,
            "00000000 00000001 00000000 00000001 11100010 01000000 00000001 00000001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000");

    // with feePartner
    doParseFeePayload(
            0,
            (short) 0,
            (short) 1,
            "00000000 00000001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000");

    doParseFeePayload(
            1,
            (short) 1,
            (short) 826,
            "00000000 00000001 00000000 00000000 00000000 00000001 00000000 00000001 00000011 00111010 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000");

    doParseFeePayload(
            123456,
            (short) 257,
            (short) 12345,
            "00000000 00000001 00000000 00000001 11100010 01000000 00000001 00000001 00110000 00111001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000");
  }

  @Test
  public void decodeEncodedBytes() throws Exception {
    for (int i = 0; i < 1000; i++) {
      byte[] encoded = feePayloadService.computeFeePayload(i, (short) 12345, (short) 1234);
      String feePayloadStr = bytesToBinaryString(encoded);
      doParseFeePayload(i, (short) 12345, (short) 1234, feePayloadStr);
    }
  }

  @Test
  public void decode_V0() throws Exception {
    String opReturn =

    doDecode(opReturn, 0, (short) 0, (short) 0, FeeOpReturnImplV0.OP_RETURN_VERSION);

    opReturn =

    doDecode(opReturn, 123456, (short) 257, (short) 12345, FeeOpReturnImplV0.OP_RETURN_VERSION);
  }

  @Test
  public void decode_V1() throws Exception {
    String opReturn =

    doDecode(opReturn, 0, (short) 0, (short) 0, FeeOpReturnImplV1.OP_RETURN_VERSION);

    opReturn =

    doDecode(opReturn, 123456, (short) 257, (short) 12345, FeeOpReturnImplV1.OP_RETURN_VERSION);
  }

  @Test
  public void decode_invalid() throws Exception {
    String opReturn =

    doDecodeNull(opReturn);

    opReturn =

    doDecodeNull(opReturn);
  }

  private void doDecode(String opReturnStr, int feeIndice, short scodePayload, short partnerPayload, short opReturnVersion) throws Exception{
    byte[] opReturn = bytesFromBinaryString(opReturnStr);

    // find
    FeeOpReturnImpl feeOpReturnImpl = feePayloadService.findOpReturnImpl(opReturn);
    Assertions.assertEquals(opReturnVersion, feeOpReturnImpl.getOpReturnVersion());

    // accepts
    Assertions.assertTrue(feePayloadService.acceptsOpReturn(opReturn));

    // decode
    ECKey pk =
            ECKey.fromPrivate(
                    new BigInteger(
                            "34069012401142361066035129995856280497224474312925604298733347744482107649210"));
    SegwitAddress segwitAddress = new SegwitAddress(pk, params);
    TransactionOutPoint outPoint = mockTxOutput(segwitAddress).getOutPointFor();

    WhirlpoolFeeOutput feeOutput = new WhirlpoolFeeOutput(null, opReturn);
    WhirlpoolFeeData feeData =
            feePayloadService.decode(feeOutput, bip47Account, outPoint, pk.getPubKey());

    Assertions.assertEquals(feeIndice, feeData.getFeeIndice());
    Assertions.assertEquals(scodePayload, feeData.getScodePayload());
    Assertions.assertEquals(partnerPayload, feeData.getPartnerPayload());
    Assertions.assertEquals(opReturnVersion, feeData.getOpReturnVersion());
    Assertions.assertEquals(FeePayloadV1.FEE_PAYLOAD_VERSION, feeData.getFeePayloadVersion());
  }

  private void doDecodeNull(String opReturnStr) throws Exception {
    byte[] opReturn = bytesFromBinaryString(opReturnStr);

    // find
    Assertions.assertNull(feePayloadService.findOpReturnImpl(opReturn));

    // accepts
    Assertions.assertFalse(feePayloadService.acceptsOpReturn(opReturn));

    // decode
    ECKey pk =
            ECKey.fromPrivate(
                    new BigInteger(
                            "34069012401142361066035129995856280497224474312925604298733347744482107649210"));
    SegwitAddress segwitAddress = new SegwitAddress(pk, params);
    TransactionOutPoint outPoint = mockTxOutput(segwitAddress).getOutPointFor();

    WhirlpoolFeeOutput feeOutput = new WhirlpoolFeeOutput(null, opReturn);
    Assertions.assertThrows(Exception.class, () -> feePayloadService.decode(feeOutput, bip47Account, outPoint, pk.getPubKey()));
  }

  private static String bytesToBinaryString(byte[] bytes) {
    List<String> strs = new ArrayList<>();
    for (byte b : bytes) {
      String str = String.format("%8s", Integer.toBinaryString((b + 256) % 256)).replace(' ', '0');
      strs.add(str);
    }
    return StringUtils.join(strs.toArray(), " ");
  }

  private static byte[] bytesFromBinaryString(String str) {
    String[] bytesStrs = str.split(" ");
    byte[] result = new byte[bytesStrs.length];
    for (int i = 0; i < bytesStrs.length; i++) {
      String byteStr = bytesStrs[i];
      result[i] = (byte) (int) (Integer.valueOf(byteStr, 2));
    }
    return result;
  }

  private void doParseFeePayload(
      int feeIndice, short scodePayload, short partnerPayload, String feePayloadStr)
      throws Exception {
    short opReturnVersion = FeeOpReturnImplV1.OP_RETURN_VERSION;
    FeeOpReturn feeOpReturn =
        new FeeOpReturn(bytesFromBinaryString(feePayloadStr), opReturnVersion);
    WhirlpoolFeeData feeData = feePayloadService.parseFeePayload(feeOpReturn, null);
    Assertions.assertEquals(feeIndice, feeData.getFeeIndice());
    Assertions.assertEquals(scodePayload, feeData.getScodePayload());
    Assertions.assertEquals(partnerPayload, feeData.getPartnerPayload());
    Assertions.assertEquals(opReturnVersion, feeData.getOpReturnVersion());
    Assertions.assertEquals(FeePayloadV1.FEE_PAYLOAD_VERSION, feeData.getFeePayloadVersion());
  }
}
